// library
loadi(63,13);
loadi(64,14);

// init program
loadi(65,7);
loadi(66,8);

// INT10
loadi(22,35);
loadi(23,36);

// exception handler
loadi(2,15);
loadi(3,16);

// timer int
loadi(4, 17);
loadi(5, 18);

// int 7
loadi(16, 29);
loadi(17, 30);

// User Process
loadi(83, 69);

// MODULE 5
loadi(50, 63);
loadi(51, 64);


//init Page Table

PTBR = PAGE_TABLE_BASE+20; //init process with PID 1
//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

// init Process Table

[PROCESS_TABLE + 16 + 11] = 80;     //UAPage number
[PROCESS_TABLE + 16 + 1] = 1;       //PID
[PROCESS_TABLE + 16 + 4] = CREATED; //STATUS
[PROCESS_TABLE + 16 + 13] = 8*512;  //UPTR
[PROCESS_TABLE + 16 + 12] = 0;      //KPTR
[PROCESS_TABLE + 16 + 14] = PAGE_TABLE_BASE+20;
[PROCESS_TABLE + 16 + 15] = 10;

[76*512] = [65*512+1];


// user process page table

PTBR = PAGE_TABLE_BASE + 40;  //as PID of user process is 2

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 84;
[PTBR+5] = "0000";
[PTBR+6] = 85;
[PTBR+7] = "0000";

//Code
[PTBR+8] = 83;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 86;
[PTBR+17] = "0110";
[PTBR+18] = 87;
[PTBR+19] = "0000";

// User Process Process Table

[PROCESS_TABLE + 16 + 11] = 80;     	//UAPage number
[PROCESS_TABLE + 16 + 1] = 1;       	//PID
[PROCESS_TABLE + 16 + 4] = CREATED; 	//STATUS
[PROCESS_TABLE + 16 + 12] = 0;		//KPTR
[PROCESS_TABLE + 16 + 13] = 8*512;  	//UPTR
[PROCESS_TABLE + 16 + 14] = PAGE_TABLE_BASE + 20;
[PROCESS_TABLE + 16 + 15] = 10;

[PROCESS_TABLE + 2*16 + 1] = 2;        //PID
[PROCESS_TABLE + 2*16 + 4] = CREATED;  //STATUS
[PROCESS_TABLE + 2*16 + 11] = 88;      //UAPage number
[PROCESS_TABLE + 2*16 + 12] = 0;       //KPTR
[PROCESS_TABLE + 2*16 + 13] = 8*512;   //UPTR
[PROCESS_TABLE + 2*16 + 14] = PAGE_TABLE_BASE + 40;	// PTBR
[PROCESS_TABLE + 2*16 + 15] = 10;			// PTLR

[86*512] = [83*512+1];

// Setting all other processes' STATUS as terminated
[PROCESS_TABLE + 3*16 + 4] = TERMINATED;
[PROCESS_TABLE + 4*16 + 4] = TERMINATED;
[PROCESS_TABLE + 5*16 + 4] = TERMINATED;
[PROCESS_TABLE + 6*16 + 4] = TERMINATED;
[PROCESS_TABLE + 7*16 + 4] = TERMINATED;
[PROCESS_TABLE + 8*16 + 4] = TERMINATED;
[PROCESS_TABLE + 9*16 + 4] = TERMINATED;
[PROCESS_TABLE + 10*16 + 4] = TERMINATED;
[PROCESS_TABLE + 11*16 + 4] = TERMINATED;
[PROCESS_TABLE + 12*16 + 4] = TERMINATED;
[PROCESS_TABLE + 13*16 + 4] = TERMINATED;
[PROCESS_TABLE + 14*16 + 4] = TERMINATED;
[PROCESS_TABLE + 15*16 + 4] = TERMINATED;

return;

